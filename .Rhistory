my_seq <- seq(5, 10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_s)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect = c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Nick")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(na,1000)
z<-rep(NA,1000)
my_data <-(c(y,z),100)
my_data <-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[30000]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vec <- c(foo =11,bar=2,norf=NA)
vect <- c(foo =11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar"])
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric
?matrix
my_matrix2 <- matrix(data=1:20, ncol=5, byrow=4)
my_matrix2 <- matrix(data=1:20, ncol=5, byrow=4, dimnames=NULL)
my_matrix2 <- matrix(data=1:20, ncol=5, nrow=4)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient",
| "age", "weight", "bp", "rating", "test")
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(patients)<-cnames
play()
patients
my_data
colnames(my_data)<-cnames
my_data
nxt()
colnames(my_data)<-cnames
my_data
ext()
exit()
q()
library(swirl())
ls()
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
uC7BBBjmbY
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20,by=0.5)
seq(1,20,by=0.5)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
update.packages(ask='graphics',checkBuilt=TRUE)
swirl()
num_vect <- c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >= 6
my_char <- c( "My", "name", "is" )
my_char
paste(my_char,collapse = " ")
my_name <- c(my_char,"Nick")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
q()
library(swirl)
library(swirl())
load(swirl)
load(swirl())
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
q()
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<-dir
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
info()
dir()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename())
args(file.rename)
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
args(file.path)
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
unlink("testdir2", recursive =TRUE)
setwd(old.dir)
unlink("testdir", recursive =TRUE)
c(44,NA,5NA)
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
q()
rm(list=ls())
library(swirl)
swirl()
my_vector(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient",
"age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
TRUE != FALSE
5 != 7
NOT(5 == 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 5)
which(ints > 7)
any(ints < 0
)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(stdev,c(1.4,3.6,7.9,8.8)
)
evaluate('stdev',c(1.4,3.6,7.9,8.8))
?stdev
??stdev
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(v){v[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Ted","Thunderbuddies")
submit()
mad_libs("Candyland","anus","fuck")
submit()
submit()
submit()
submit()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <! lapply(flags,class)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags,class)
cls_list <- lapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shape,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
update.packages(ask='graphics',checkBuilt=TRUE)
chooseCRANmirror()
update.packages(ask='graphics',checkBuilt=TRUE)
utils:::menuInstallPkgs()
library(swirl)
library(swirl())
install.packages("swirl")
library(swirl())
library(swirl())
library(swirl)
q()
lm()
lm
ls
ls()
rm(list=ls())
ls()
v1 < c(1:10)
v1 <- c(1:10)
v1
v1c <- makeVector(v1)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v1c <- makeVector(v1)
v1c
vlc$getmean()
v1c$getmean()
v1c$get()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(v1c)
v2<-c(3,4,5)
v2c<-makeVector(v2)
cachemean(v2c)
cachemean(v2c)
cachemean(v1c)
v1c.set(18)
v1c$set(18)
v1c
v1c$get()
cachemean(v1c)
cachemean(v1c)
v1c$set(c(2:30))
v1c$get()
v1c$getmean()
cachemean(v1c)
cachemean(v1c)
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
q()
rm(list=ls())
ls()
q()
setwd("C:/Users/Nicholas/Dropbox/Coding/GitHub/RepData_PeerAssessment1/")
getwd();
activity_data <- read.csv("activity.csv")
activity_by_date <- group_by(activity_data, date)
steps_by_date <- summarise(activity_by_date, steps=sum(steps))
hist(steps_by_date$steps, freq=TRUE, label=TRUE, main="Frequency of steps over 60 days", xlab="Steps", ylab="Count of Days", col="darkred")
mean(steps_by_date$steps, na.rm = TRUE)
sum(steps_by_date$steps, na.rm = TRUE)
median(steps_by_date$steps, na.rm = TRUE)
## ?mean
colnames(activity_data)
activity_by_interval <- group_by(activity_data, interval)
steps_by_interval <- summarise(activity_by_interval, steps=mean(steps, na.rm=TRUE))
## steps_by_interval
## ?group_by
## ?plot
plot(steps_by_interval$interval,steps_by_interval$steps,type="l", main="Average number of steps over 5 minutes intervals", xlab="Interval", ylab="Steps", col="darkred")
summary(activity_data$interval)
which.max(steps_by_interval$interval)
?which.max
which.max(steps_by_interval$steps)
getwd();
activity_data
steps_by_interval
colnames(activity_data)
activity_by_interval
activity_by_interval <- group_by(activity_data, interval)
library(dplyr)
activity_by_interval <- group_by(activity_data, interval)
steps_by_interval <- summarise(activity_by_interval, steps=mean(steps, na.rm=TRUE))
?which.max
which.max(steps_by_interval$steps)
nm.rm(activity_data)
?nm.na
colnames(activity_data)
sum(is.na(activity_data$steps))
sum(is.na(activity_data$date))
sum(is.na(activity_data$interval))
mean(activity_data$steps, na.rm=activity_data$steps)
mean(activity_data$steps, na.rm=TRUE)
?mean
steps_by_interval
new_activity_table <-activity_data
new_activity_table
sum(is.na(new_activity_table$steps))
sum(is.na(activity_data$steps))
new_activity_table$steps[is.na(new_activity_table$steps)]
new_activity_table[is.na(new_activity_table$steps)]
new_activity_table$interval[is.na(new_activity_table$steps)]
steps_by_interval$inverval=new_activity_table$interval[is.na(new_activity_table$steps)]
steps_by_interval
new_activity_table
sum(is.na(new_activity_table$steps))
steps_by_interval$inverval=new_activity_table$interval[is.na(new_activity_table$steps)]
steps_by_interval
steps_by_interval$inverval
steps_by_interval <- summarise(activity_by_interval, steps=mean(steps, na.rm=TRUE))
steps_by_interval
new_activity_table$steps[is.na(new_activity_table$steps)] <- steps_by_interval$inverval=new_activity_table$interval[is.na(new_activity_table$steps)]
new_activity_table$steps[is.na(new_activity_table$steps)] <- steps_by_interval$inverval=new_activity_table$interval[is.na(new_activity_table$steps)]
new_activity_table$steps[is.na(new_activity_table$steps)] <- steps_by_interval$steps[steps_by_interval$inderval=new_activity_table$interval[is.na(new_activity_table$steps)]]
new_activity_table$steps[is.na(new_activity_table$steps)] <- steps_by_interval$steps[steps_by_interval$interval=new_activity_table$interval[is.na(new_activity_table$steps)]]
steps_by_interval$steps[steps_by_interval$interval=25]
steps_by_interval$steps[steps_by_interval$interval==25]
new_activity_table$steps[is.na(new_activity_table$steps)] <- steps_by_interval$steps[steps_by_interval$interval==new_activity_table$interval[is.na(new_activity_table$steps)]]
sum(is.na(new_activity_table$steps))
new_activity_table <-activity_data
sum(is.na(new_activity_table$steps))
my_fill_na_values <- function(interval_step,table_interval) {
steps <- table_interval$steps[table_interval$interval==interval_step]
return(steps)
}
new_activity_table <-activity_data
new_activity_table$steps[is.na(new_activity_table$steps)] <- my_fill_na_values(new_activity_table$interval,steps_by_interval)
lapply
?lapply
